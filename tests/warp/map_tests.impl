__global__ void test_exp_ker(const bf16 *input, bf16 *output) {

    extern __shared__ __align__(16) int __shm[]; // this is the CUDA shared memory
    shared_allocator al = shared_allocator::create_allocator((int*)&__shm[0]); 

    rt_bf<HEIGHT, WIDTH> reg_tile;

    auto block = cooperative_groups::this_thread_block();
    __shared__ cuda::barrier<cuda::thread_scope::thread_scope_block> barrier;
    if (threadIdx.x == 0) {init(&barrier, block.size());}
    block.sync();
    
    st_bf<HEIGHT, WIDTH> &smem_tile = al.allocate<st_bf<HEIGHT, WIDTH>>();

    block.sync();
    load_async(smem_tile, input, COLS, barrier);
    barrier.arrive_and_wait();
    
    load(reg_tile, smem_tile);
    exp(reg_tile, reg_tile);
    store(smem_tile, reg_tile);

    store_async(output, smem_tile, COLS, barrier);
    barrier.arrive_and_wait();
}
bool test_exp() {
    // initialize
    bf16 *d_i, *d_o;
    std::vector<float> i_ref(SIZE);
    std::vector<float> o_ref(SIZE);
    initialize(&d_i, &d_o, i_ref, o_ref);
    // run kernel
    cudaFuncSetAttribute(test_exp_ker, cudaFuncAttributeMaxDynamicSharedMemorySize, 100000);
    test_exp_ker<<<1, 32, 100000>>>(d_i, d_o);
    // fill in correct results on cpu
    for(int i = 0; i < SIZE; i++) o_ref[i] = expf(i_ref[i]);
    // check and cleanup
    bool passed = validate(d_i, d_o, i_ref, o_ref, "exp_tile");
    return passed;
}

int map_tests() {
    std::cout << " ----- Starting map tests! -----" << std::endl;
    int failures = 0;
    failures += !test_exp();
    return failures;
}