namespace global_to_shared {
struct st_load_store {
    template<int H, int W, int NW, ducks::st_layout::all L> using valid = std::bool_constant<NW == 1 &&
        (!std::is_same_v<L, ducks::st_layout::tma_swizzle> || W == 1 || W == 2 || W == 4)>;
    static inline const std::string test_identifier = "shared_loadstore";
    template<int H, int W, int NW, ducks::st_layout::all L> __host__ static void host_func(const std::vector<float> &i_ref, std::vector<float> &o_ref) {
        o_ref = i_ref; // overwrite the whole thing
    }
    template<int H, int W, int NW, ducks::st_layout::all L> __device__ static void device_func(const bf16 *input, bf16 *output) {
        extern __shared__ alignment_dummy __shm[]; // this is the CUDA shared memory
        shared_allocator<16> al((int*)&__shm[0]); 
        st_bf<H, W, L> &shared_tile = al.allocate<st_bf<H, W, L>>();
        load(shared_tile, input, W*16);
        store(output, shared_tile, W*16);
    }
};
struct st_load_store_async {
    template<int H, int W, int NW, ducks::st_layout::all L> using valid = std::bool_constant<NW == 1 &&
        (!std::is_same_v<L, ducks::st_layout::tma_swizzle> || W == 1 || W == 2 || W == 4)>;
    static inline const std::string test_identifier = "shared_loadstore_async";
    template<int H, int W, int NW, ducks::st_layout::all L> __host__ static void host_func(const std::vector<float> &i_ref, std::vector<float> &o_ref) {
        o_ref = i_ref; // overwrite the whole thing
    }
    template<int H, int W, int NW, ducks::st_layout::all L> __device__ static void device_func(const bf16 *input, bf16 *output) {
        extern __shared__ alignment_dummy __shm[]; // this is the CUDA shared memory
        shared_allocator<16> al((int*)&__shm[0]); 

        auto block = cooperative_groups::this_thread_block();
        __shared__ cuda::barrier<cuda::thread_scope::thread_scope_block> barrier;
        if (threadIdx.x == 0) {init(&barrier, block.size());}
        block.sync();
        
        st_bf<H, W, L> &shared_tile = al.allocate<st_bf<H, W, L>>();

        block.sync();
        load_async(shared_tile, input, W*16, barrier);
        barrier.arrive_and_wait();

        store_async(output, shared_tile, W*16, barrier);
        barrier.arrive_and_wait();
    }
};

void tests(test_data &results) {
    std::cout << " ----- Starting ops/warp/memory/global_to_shared tests! -----" << std::endl;
    sweep_st_layout_size_2d_warp<st_load_store, 8, 8>::run(results);
    sweep_st_layout_size_2d_warp<st_load_store_async, 8, 8>::run(results);
}
}