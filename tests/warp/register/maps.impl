namespace maps {
struct exp {
    template<int H, int W, int NW, ducks::rt_layout::all L> using valid = std::bool_constant<NW == 1>; // this is warp-level
    static inline const std::string test_identifier = "reg_exp";
    template<int H, int W, int NW, ducks::rt_layout::all L> __host__ static void host_func(const std::vector<float> &i_ref, std::vector<float> &o_ref) {
        for(int i = 0; i < i_ref.size(); i++) o_ref[i] = expf(i_ref[i]); // overwrite the whole thing
    }
    template<int H, int W, int NW, ducks::rt_layout::all L> __device__ static void device_func(const bf16 *input, bf16 *output) {
        rt_bf<H, W, L> reg_tile;
        load(reg_tile, input, W*16);
        kittens::exp(reg_tile, reg_tile);
        store(output, reg_tile, W*16);
    }
};

void tests(test_data &results) {
    std::cout << " ----- Starting ops/warp/register/maps tests! -----" << std::endl;
    sweep_size_2d_warp<exp, 4, 4, ducks::rt_layout::row>::run(results);
    sweep_size_2d_warp<exp, 4, 4, ducks::rt_layout::col>::run(results);
}
}